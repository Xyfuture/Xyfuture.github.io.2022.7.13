<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计组 on My New Hugo Site</title>
    <link>http://example.org/tags/%E8%AE%A1%E7%BB%84/</link>
    <description>Recent content in 计组 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Mar 2020 14:16:35 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E8%AE%A1%E7%BB%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计组 四则运算</title>
      <link>http://example.org/posts/%E8%AE%A1%E7%BB%84-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/</link>
      <pubDate>Mon, 02 Mar 2020 14:16:35 +0000</pubDate>
      
      <guid>http://example.org/posts/%E8%AE%A1%E7%BB%84-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/</guid>
      <description>前言 ​	最近学完了整数的加减乘除四则运算,本质上还是根据最基础的数学定理用计算机模仿人的运算步骤,但是因为数值表示的原因,初看起来还是有点难懂的,因此总结一下.
准备工作 ​	准备工作主要指数据的编码,尤其是补码的原理,这个在上一篇中有讲,补码核心的内容就是把负数用mod的方法转换为了正数,然后因为加上了一个数因此在符号位特殊标记一下.借助这个规则我们可以实现四则运算同时解决溢出问题,因此必须对补码有一个较为深刻的认识,否者只能死记硬背了.
加法  加法和减法都是通过补码实现的,借助补码两者可以同一
 加法其实没有什么好说的,按照正常的规则补码直接加,得到的结果也是补码
就是按照满2进1的规则来就行,符号位也要算上去,没什么好说的.注意一点是最后的这个mod XX这个意思是为了保持位数,比如8位+8位我们不给出9位的答案,多的一位会被截断,这就引发了另一个问题就是溢出,8位的答案不能表达实际的答案,这个问题在减法中统一讨论.
减法要转为加法进行处理 $$ A-B\ =\ A+(-B) $$ 这个规则对于补码也是成立的 $$ [A]_补-[B]_补\ =\ [A]_补+[-B]_补 $$ 因此我们将减数转换成他的相反数,规则在上一篇文章中也讲过,所有位(包括符号位)取反,再+1,之后执行正常的加法就行了.
溢出问题 溢出问题是非常重要和有趣的. 溢出的意思就是当前的数据位数没有办法表达当前的数据. 比如8位可以表示-128-127,但是当两个-128相加时得到的数(-256)就没法表示了,因此就溢出了,下面来说说溢出在补码上的表现
溢出只发生在正数加正数和负数加负数时,当两个符号位相同时相加得到了一个不同的符号位就发生了溢出
负数加负数 1000,0000 +1111,1111 1,0111,1111 可以看到第8位发生了变换了,因此负数溢出,原理就是原本符号位上的1表示这个数是由负数加128而来的,两个负数相加时$128+X_1+128+X_2(X_1,X_2&amp;lt;0)$,如果这个数&amp;gt;128则会进1,使符号位重新成为1,但是同时后面7位表示的也是$128+X_1+X_2$,因为多的128进位了,这样还是符合补码的原理的,但是没有两个数加起来不到128时说明后面7位还是$128+X_1+128+X_2$这样要想的到原来的值需要加-256不符合补码原理.
杂七杂八 符号位上的1表示的时后面数值位是128- 原数的绝对值得到的,符号位这个不能表示数值大小,能表示的是状态,后面的进位过来会改变符号位,不论怎么改,只要能按照规则转换回去就说明是对的,不必太过看重这个符号位.
两个符号位 11.xxxx 00.xxxx 这种数有两个符号位,最终加减得到的结果有4种 00 ,11 正常情况,表述正数,负数 10 &amp;mdash; 负溢出 01 &amp;mdash; 正溢出
乘法  乘法的原理建议先看竖式是怎么算的,本质上是乘法分配律  原码乘法 原码乘法就是数用原码进行表示,符号位单独讨论 直接看ppt吧,得到的数是补码,记得单独算符号位,最后加上 几个问题
1.为什么是逻辑右移? 因为符号不在这里讨论,这里的0.x的0用来存进位(解决原本的溢出问题) 2.移动了几次? 乘数有几位就移动几次 3.得到的积? 得到积是两部分,一部分高位,一部分低位,占用两个寄存器 补码乘法  补码乘法较为复杂这里只介绍 Booth法</description>
    </item>
    
  </channel>
</rss>
